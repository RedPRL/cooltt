def boundary-test : (i : 𝕀) (_ : [∂ i]) → nat :=
  i _ =>
  [ i=1 => 5
  | i=0 => 19
  ]

#normalize boundary-test

def reflexivity : (A : type) (a : A) (i : 𝕀) → A :=
  A a _ => a


def pi-code-test : type := (x : nat) → nat

def foo : pi-code-test :=
  x => x

#normalize pi-code-test


def simple-let :
  (A : type) (a : A) -> A
:=
  A a =>
  let b : A := a in
  b

#normalize simple-let


def hole-in-type :
  (x y z : nat)
  → ?tyhole
:=
  y z => ?tmhole

def path (A : type) (a b : A) : type :=
  ext i => A with [i=0 => a | i=1 => b]

def foo : (x : nat) → (y : nat) × path nat x y :=
  x =>
  [x, ?hole1]
