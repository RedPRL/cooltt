-- Various tests for sig types + structs
import prelude

def basic : type :=
  sig
    (foo.x : nat)
    (bar : nat → nat)

def basic.inhabit : basic := struct (foo.x : 1) (bar : x => suc x)

print basic
print basic.inhabit
normalize basic.inhabit
normalize basic.inhabit@foo.x
normalize basic.inhabit@bar 1

def basic/ext
  (b0 : basic) (b1 : basic)
  (p : path nat {b0 @ foo.x} {b1 @ foo.x})
  (q : path {nat → nat} {b0 @ bar} {b1 @ bar}) : path basic b0 b1
:=
i =>
struct
  (foo.x : p i)
  (bar : q i)

def depend : type :=
  sig
    (tp : type)
    (fun : tp → tp)

print depend

-- Make sure dependent paths work
def depend/ext
  (d0 : depend)
  (d1 : depend)
  (p : path type {d0 @ tp} {d1 @ tp})
  (q : path-p {i => p i → p i} {d0 @ fun} {d1 @ fun}) : path depend d0 d1
:=
i => struct (tp : p i) (fun : q i)


-- Can we inhabit first class sigs?
def sig/inhabit :
  sig
    (tp : type)
    (fun : tp → tp → type)
    (comp : (X : tp) (Y : tp) (Z : tp) (f : fun Y Z) → (g : fun X Y) → fun X Z)
:=
struct (tp : nat) (fun : x y => nat) (comp : x y z f g => 1)

-- Can we convert between equal representations of sig types?
def sig/conv : path type depend {sig (tp : type) (fun : tp → tp)} :=
i => depend

-- Test that forming paths in first-class sigs works
def sig/ext
  (b0 : sig (foo : nat))
  (b1 : sig (foo : nat))
  (p : path nat {b0 @ foo} {b1 @ foo})
  : path {sig (foo : nat)} b0 b1
:=
i => struct (foo : p i)


-- Test that empty sigs/structs work
def empty : type := sig
def empty/inhabit : empty := struct
