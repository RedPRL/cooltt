-- Various tests for sig types + structs
import prelude

def test : type :=
  sig
    def x : type
    def y : type
    def fn : x -> y
  end

#print test

def basic : type :=
  sig
    def foo::x : nat
    def bar : nat → nat
  end

def basic::inhabit : basic := struct [foo::x := 1, bar := x => suc x]

#print basic
#print basic::inhabit
#normalize basic::inhabit
#normalize basic::inhabit.foo::x
#normalize basic::inhabit.bar 1

def basic/ext
  (b0 : basic) (b1 : basic)
  (p : path nat {b0 . foo::x} {b1 . foo::x})
  (q : path {nat → nat} {b0.bar} {b1.bar}) : path basic b0 b1
:=
i =>
struct
  def foo::x := p i
  def bar := q i
end

def depend : type :=
  sig
    def tp : type
    def fun : tp → tp
  end

#print depend

-- Make sure dependent paths work
def depend/ext
  (d0 : depend)
  (d1 : depend)
  (p : path type {d0.tp} {d1.tp})
  (q : path-p {i => p i → p i} {d0.fun} {d1.fun}) : path depend d0 d1
:=
i => struct [tp := p i, fun := q i]


-- Can we inhabit first class sigs?
def sig/inhabit :
  sig
    def tp : type
    def fun : tp → tp → type
    def comp : (X : tp) (Y : tp) (Z : tp) (f : fun Y Z) → (g : fun X Y) → fun X Z
  end
:=
struct [tp := nat, fun := x y => nat, comp := x y z f g => 1]

-- Can we convert between equal representations of sig types?
def sig/conv : path type depend {sig [tp : type, fun : tp → tp]} :=
i => depend

-- Test that forming paths in first-class sigs works
def sig/ext
  (b0 : sig [foo : nat])
  (b1 : sig [foo : nat])
  (p : path nat {b0.foo} {b1.foo})
  : path {sig [foo : nat]} b0 b1
:=
i => struct [foo := p i]


-- Test that empty sigs/structs work
def empty : type := sig []
def empty/inhabit : empty := struct []
