-- "stdlib"
import prelude

-- isomorphisms

def iso : type :=
  sig
    def A : type
    def B : type
    def fwd : A → B
    def bwd : B → A
    def fwd-bwd : (b : B) → path B {fwd {bwd b}} b
    def bwd-fwd : (a : A) → path A {bwd {fwd a}} a
  end


abstract
def iso/refl (A : type) : iso # [A := A, B := A] :=
  struct
    def fwd := x => x
    def bwd := x => x
    def fwd-bwd := b i => b
    def bwd-fwd := a i => a
  end

abstract
def iso/symm (I : iso) : iso # [A := I.B, B := I.A] :=
open I in
  struct
    def fwd := bwd
    def bwd := fwd
    def fwd-bwd := bwd-fwd
    def bwd-fwd := fwd-bwd
  end


abstract
def iso/trans (I1 : iso) (I2 : iso # [ A := I1.B ]) : iso # [A := I1.A, B := I2.B] :=
  struct
    def fwd := a => I2.fwd {I1.fwd a}
    def bwd := b => I1.bwd {I2.bwd b}
    def fwd-bwd := b => trans {I2.B} {j => I2.fwd {I1.fwd-bwd {I2.bwd b} j}} {I2.fwd-bwd b}
    def bwd-fwd := a => trans {I1.A} {j => I1.bwd {I2.bwd-fwd {I1.fwd a} j}} {I1.bwd-fwd a}
  end

-- pair isos

abstract
def iso/pair/comm (X Y : type) : iso # [A := X × Y, B := Y × X] :=
  struct
    def fwd := ab => [snd ab, fst ab]
    def bwd := ba => [snd ba, fst ba]
    def fwd-bwd := ba i => ba
    def bwd-fwd := ab i => ab
  end

abstract
def iso/pair/assoc (X Y Z : type) : iso # [A := {X × Y × Z}, B := {{X × Y} × Z}] :=
  struct
    def fwd := a_bc => [[fst a_bc, fst {snd a_bc}], snd {snd a_bc}]
    def bwd := ab_c => [fst {fst ab_c}, [snd {fst ab_c}, snd ab_c]]
    def fwd-bwd := ab_c i => ab_c
    def bwd-fwd := a_bc i => a_bc
  end

abstract
def iso/pair/unit (X : type) : iso # [A := X × unit, B := X] :=
  struct
    def fwd := au => fst au
    def bwd := a => [a, ⋆]
    def fwd-bwd := a i => a
    def bwd-fwd := au i => au
  end


-- function isos

def curry (A B C : type) : {{A × B} → C} → {A → B → C} :=
  f a b => f [a , b]

def uncurry (A B C : type) : {A → B → C} → {{A × B} → C} :=
  f ab => f {fst ab} {snd ab}

def iso/curry (X Y Z : type) : iso # [A := X → Y → Z, B := {X × Y} → Z] :=
  struct
    def fwd := uncurry X Y Z
    def bwd := curry X Y Z
    def fwd-bwd := ab_c i => ab_c
    def bwd-fwd := a_b_c i => a_b_c
  end

def iso/lhs (C : type) (I : iso) : iso # [A := {I.A} → C, B := {I.B} → C] :=
  open I in
  struct
    def fwd := ac b => ac {bwd b}
    def bwd := bc a => bc {fwd a}
    def fwd-bwd := bc i b => bc {fwd-bwd b i}
    def bwd-fwd := ac i a => ac {bwd-fwd a i}
  end

def iso/rhs (C : type) (I : iso) : iso # [A := C → {I.A}, B := C → {I.B} ] :=
  open I in
  struct
    def fwd := ca c => fwd {ca c}
    def bwd := cb c => bwd {cb c}
    def fwd-bwd := cb i c => fwd-bwd {cb c} i
    def bwd-fwd := ca i c => bwd-fwd {ca c} i
  end

def iso/flip (X Y Z : type) : iso # [A := X → Y → Z, B := Y → X → Z] :=
  struct
    def fwd := abc b a => abc a b
    def bwd := bac a b => bac b a
    def fwd-bwd := bac i => bac
    def bwd-fwd := abc i => abc
  end
