-- "stdlib"
import prelude

-- isomorphisms

def iso (A B : type) : type :=
  sig (f : A → B)
      (g : B → A)
      (isol : (b : B) → path B {f {g b}} b)
      (isor : (a : A) → path A {g {f a}} a)

def iso/refl (A : type) : iso A A :=
  struct (f : a => a)
         (g : a => a)
	 (isol : a i => a)
	 (isor : a i => a)

def iso/symm (A B : type) (I : iso A B) : iso B A :=
  struct (f : I.g)
         (g : I.f)
	 (isol : I.isor)
	 (isor : I.isol)

def iso/trans (A B C : type) (I1 : iso A B) (I2 : iso B C) : iso A C :=
  struct (f : a => I2.f {I1.f a})
         (g : c => I1.g {I2.g c})
	 (isol : c => trans C {j => I2.f {I1.isol {I2.g c} j}} {I2.isol c})
	 (isor : a => trans A {j => I1.g {I2.isor {I1.f a} j}} {I1.isor a})

-- pair isos
def iso/pair/comm (A B : type) : iso {A × B} {B × A} :=
  struct (f : ab => [ snd ab, fst ab ])
         (g : ba => [ snd ba, fst ba ])
	 (isol : ba i => ba)
	 (isor : ab i => ab)
  
def iso/pair/assoc (A B C : type) : iso {A × B × C} {{A × B} × C} :=
  struct (f : a_bc => [[ fst a_bc, fst {snd a_bc} ], snd {snd a_bc} ])
         (g : ab_c => [ fst {fst ab_c} , [snd {fst ab_c}, snd ab_c ]])
	 (isol : ab_c i => ab_c)
	 (isor : a_bc i => a_bc)

def iso/pair/unit (A : type) : iso {A × unit} A :=
  struct (f : au => fst au)
         (g : a => [a,⋆])
	 (isol : a i => a)
	 (isor : au i => au)

-- function isos

def curry (A B C : type) : {{A × B} → C} → {A → B → C} :=
  f a b => f [a , b]

def uncurry (A B C : type) : {A → B → C} → {{A × B} → C} :=
  f ab => f {fst ab} {snd ab}

def iso/curry (A B C : type) : iso {A → B → C} {{A × B} → C} :=
  struct (f : uncurry A B C)
         (g : curry A B C)
	 (isol : ab_c i => ab_c)
	 (isor : a_b_c i => a_b_c)

def iso/lhs (A B C : type) (I : iso A B) : iso {A → C} {B → C} :=
  struct (f : ac b => ac {I.g b})
         (g : bc a => bc {I.f a})
	 (isol : bc i b => bc {I.isol b i})
	 (isor : ac i a => ac {I.isor a i})

def iso/rhs (A B C : type) (I : iso A B) : iso {C → A} {C → B} :=
  struct (f : ca c => I.f {ca c})
         (g : cb c => I.g {cb c})
	 (isol : cb i c => I.isol {cb c} i)
	 (isor: ca i c => I.isor {ca c} i)

def iso/flip (A B C : type) : iso {A → B → C} {B → A → C} :=
  struct (f : abc b a => abc a b)
         (g : bac a b => bac b a)
	 (isol : bac i => bac)
	 (isor : abc i => abc)
