def symm : {
  (A : type) (p : 𝕀 → A) → path {_ => A} {p 1} {p 0}
}= {
  A p i =>
  hcom A 0 1 {j _ =>
    [ j=0 ∨ i=1 => p 0
    | i=0 => p j
    ]
  }
}

def trans/filler : {
  (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → 𝕀 → 𝕀 → A
} = {
  A p q j i =>
  hcom A 0 j {∂ i} {j _ =>
    [ j=0 ∨ i=0 => p i
    | i=1 => q j
    ]
  }
}

def trans : {
  (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → path {_ => A} {p 0} {q 1}
} = {
  A p q => trans/filler A p q 1
}


def J : {
  (A : type) (p : 𝕀 → A) (C : {(i : 𝕀) → sub A {i=0} {p 0}} → type) →
  {C {_ => p 0}} → C p
} = {
  A p C d =>
  coe {i => C {hfill A 0 {∂ i} {k _ => [k=0 ∨ i=0 => p 0 | i=1 => p k]}}} 0 1 d
}

normalize J

/-
def trans-assoc : {
  (A : type) (s : A) (t : A) (u : A) (v : A)
  (p : path {_ => A} s t) (q : path {_ => A} t u) (r : path {_ => A} u v) →
    path
      {_ => path {_ => A} s v}
      {trans A {trans A p q} r}
      {trans A p {trans A q r}}
} = {
  A s t u v p q r i j => hcom A 0 j {k _ => ?}
}
-/

/-
def trans-left-unit : {
  (A : type) (p : 𝕀 → A)
  → path {_ => path {_ => A} {p 0} {p 1}} {trans A {_ => p 0} p} p
} = {
  A p => ?
}
-/

def trans-right-unit : {
  (A : type) (p : 𝕀 → A)
  → path {_ => path {_ => A} {p 0} {p 1}} p {trans A p {_ => p 1}}
} = {
  A p => trans/filler A p {_ => p 1}
}

/-
def trans-symm-refl : {
  (A : type) (p : 𝕀 → A)
  → path {_ => path {_ => A} {p 0} {p 0}} {trans A p {symm A p}} {_ => p 0}
} = {
  A p => ?
}
-/

def cong : {
  (A : type) (B : type) (f : A → B) (p : 𝕀 → A) →
  path {_ => B} {f {p 0}} {f {p 1}}
} = {
  A B f p i => f {p i}
}

def + : nat → nat → nat = {
  λ elim [
  | zero => n => n
  | suc {_ => ih} => n => suc {ih n}
  ]
}

def +-right-unit : (x : nat) → path {_ => nat} {+ x 0} x = {
  λ elim [
  | zero =>
    _ => 0
  | suc {y => ih} =>
    i => suc {ih i}
  ]
}

def +-left-unit : (x : nat) → path {_ => nat} {+ 0 x} x = {
  x _ => x
}

def +-suc-r : (x : nat) (y : nat) → path {_ => nat} {+ x {suc y}} {suc {+ x y}} = {
  λ elim [
  | zero =>
    x i => {suc x}
  | suc {x => ih} =>
    y i => suc {ih y i}
  ]
}

def +-comm : (x : nat) (y : nat) → path {_ => nat} {+ y x} {+ x y} = {
  λ elim [
  | zero => +-right-unit
  | suc {y => ih} =>
    z =>
    trans nat {+-suc-r z y} {j => suc {ih z j}}
  ]
}

def +-assoc : {
  (x : nat) (y : nat) (z : nat) →
  path {_ => nat} {+ {+ x y} z} {+ x {+ y z}}
} = {
  λ elim [
  | zero => y z i => + y z
  | suc {x => ih} => y z i => suc {ih y z i}
  ]
}

def test : {
  (p : 𝕀 → nat) → (i : 𝕀) → nat
} = {
  p i =>
  rec {symm nat p i} @ nat [
  | zero => zero
  | suc {x => ih} => zero
  ]
}


def test2 : {
  (i : 𝕀) → nat
} = {
  i =>
  rec {symm nat {_ => zero} i} @ nat [
  | zero => zero
  | suc {x => ih} => zero
  ]
}

normalize test

-- You can "normalize" test2; observe how on the inside, there is some eliminator
-- that ought to be computed away, but is blocked by a disjunction system.
normalize test2

-- The following illustrates that although cooltt's quasi-normal forms aren't as fully
-- reduced as they could be, it is of no consequence for definitional
-- equivalence. That is, we don't bother pushing eliminators through all the
-- branches of a disjunction split, but our equational theory acts as if we do.
def test2' : sub {𝕀 → nat} #t {i => hcom nat 0 1 {∂ i} {_ _ => 0}} = test2

