def symm/filler : {
  (A : type) (p : 𝕀 → A) → 𝕀 → 𝕀 → A
}= {
  λ A p i =>
  hfill A 0 {∂ i} {λ j _ =>
    [ j=0 ∨ i=1 => p 0
    | i=0 => p j
    ]
  }
}

def symm : {
  (A : type) (p : 𝕀 → A) → path {λ _ => A} {p 1} {p 0}
}= {
  λ A p i => symm/filler A p i 1
}

def trans/filler : {
  (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → 𝕀 → 𝕀 → A
} = {
  λ A p q j i =>
  hcom A 0 j {∂ i} {λ j _ =>
    [ j=0 ∨ i=0 => p i
    | i=1 => q j
    ]
  }
}

def trans : {
  (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → path {λ _ => A} {p 0} {q 1}
} = {
  λ A p q => trans/filler A p q 1
}


def J : {
  (A : type) (p : 𝕀 → A) (C : {(i : 𝕀) → sub A {i=0} {p 0}} → type) →
  {C {λ _ => p 0}} → C p
} = {
  λ A p C d =>
  coe {λ i => C {hfill A 0 {∂ i} {λ k _ => [k=0 ∨ i=0 => p 0 | i=1 => p k]}}} 0 1 d
}

normalize J

def J/eq : {
  (A : type) (p : 𝕀 → A) (C : {(i : 𝕀) → sub A {i=0} {p 0}} → type) →
  (d : C {λ _ => p 0}) → path {λ _ => C {λ _ => p 0}} {J A {λ _ => p 0} C d} d
} = {
  λ A p C d =>
  let square : 𝕀 → 𝕀 → A = λ i => hfill A 0 {∂ i} {λ _ _ => p 0} in
  λ k =>
  let mot : 𝕀 → type =
    λ i => C {hfill A 0 {∂ k ∨ ∂ i} {λ j _ => [k=0 => square i j | j=0 ∨ k=1 ∨ ∂ i => p 0]}}
  in
  com mot 0 1 {∂ k} {λ i _ => [k=0 => coe {λ j => C {square j}} 0 i d | k=1 ∨ i=0 => d]}
}

/-
def trans-left-unit : {
  (A : type) (p : 𝕀 → A)
  → path {λ _ => path {λ _ => A} {p 0} {p 1}} {trans A {λ _ => p 0} p} p
} = {
  λ A p k i =>
  hcom A 0 1 {k=0 ∨ ∂ i} {λ j _ =>
    [ j=0 ∨ ∂ i => [j=0 ∨ i=1 => p j | i=0 => p 0]
    | k=0 => hcom A 0 1 {λ l _ =>
        [ l=0 ∨ j=0 ∨ i=0 => p 0
        | i=1 => hcom A 0 j {∂ l} {λ j _ => [ l=0 ∨ j=0 => p 0 | l=1 => p j ]}
        ]
      }
    ]
  }
}
-/

/-
-- redtt version:
def trans/unit/l (A : type) (p : 𝕀 → A) : path (path _ (p 0) (p 1)) p (trans _ (λ _ → p 0) p) =
  λ k i →
  comp 0 1 [
--| j=0 _ → p 0
  | k=0 j →
    comp 0 1 (p 0) [
    | i=1 l → comp 0 j (p 0) [ l=0 → refl | l=1 → p ]
    | j=0 | i=0 → refl
    ]
  | i=0 → refl
  | i=1 → p
  ]
-/

def trans-right-unit : {
  (A : type) (p : 𝕀 → A)
  → path {λ _ => path {λ _ => A} {p 0} {p 1}} p {trans A p {λ _ => p 1}}
} = {
  λ A p => trans/filler A p {λ _ => p 1}
}

def trans-symm-refl : {
  (A : type) (p : 𝕀 → A)
  → path {λ _ => path {λ _ => A} {p 0} {p 0}} {λ _ => p 0} {trans A p {symm A p}}
} = {
  λ A p k i =>
  hcom A 0 1 {k=0 ∨ ∂ i} {λ j _ =>
    [ j=0 ∨ i=0 => p i
    | k=0 ∨ i=1 => symm/filler A p j i
    ]
  }
}

def cong : {
  (A : type) (B : type) (f : A → B) (p : 𝕀 → A) →
  path {λ _ => B} {f {p 0}} {f {p 1}}
} = {
  λ A B f p i => f {p i}
}

def + : nat → nat → nat = {
  λ elim [
  | zero => λ n => n
  | suc {_ => ih} => λ n => suc {ih n}
  ]
}

def +-right-unit : (x : nat) → path {λ _ => nat} {+ x 0} x = {
  λ elim [
  | zero =>
    λ _ => 0
  | suc {y => ih} =>
    λ i => suc {ih i}
  ]
}

def +-left-unit : (x : nat) → path {λ _ => nat} {+ 0 x} x = {
  λ x _ => x
}

def +-suc-r : (x : nat) (y : nat) → path {λ _ => nat} {+ x {suc y}} {suc {+ x y}} = {
  λ elim [
  | zero =>
    λ x i => {suc x}
  | suc {x => ih} =>
    λ y i => suc {ih y i}
  ]
}

def +-comm : (x : nat) (y : nat) → path {λ _ => nat} {+ y x} {+ x y} = {
  λ elim [
  | zero => +-right-unit
  | suc {y => ih} =>
    λ z =>
    trans nat {+-suc-r z y} {λ j => suc {ih z j}}
  ]
}

def +-assoc : {
  (x : nat) (y : nat) (z : nat) →
  path {λ _ => nat} {+ {+ x y} z} {+ x {+ y z}}
} = {
  λ elim [
  | zero => λ y z i => + y z
  | suc {x => ih} => λ y z i => suc {ih y z i}
  ]
}

def test : {
  (p : 𝕀 → nat) → (i : 𝕀) → nat
} = {
  λ p i =>
  rec {symm nat p i} @ nat [
  | zero => zero
  | suc {x => ih} => zero
  ]
}


def test2 : {
  (i : 𝕀) → nat
} = {
  λ i =>
  rec {symm nat {\_ => zero} i} @ nat [
  | zero => zero
  | suc {x => ih} => zero
  ]
}

normalize test

-- You can "normalize" test2; observe how on the inside, there is some eliminator
-- that ought to be computed away, but is blocked by a disjunction system.
normalize test2

-- The following illustrates that although cooltt's quasi-normal forms aren't as fully
-- reduced as they could be, it is of no consequence for definitional
-- equivalence. That is, we don't bother pushing eliminators through all the
-- branches of a disjunction split, but our equational theory acts as if we do.
def test2' : sub {𝕀 → nat} #t {λ i => hcom nat 0 1 {∂ i} {λ _ _ => 0}} = test2

