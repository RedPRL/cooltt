def symm : {
  (A : univ) (p : 𝕀 → A) → path {λ _ => A} {p 1} {p 0}
}= {
  λ A p i =>
  hcom A 0 1 {λ j _ =>
    [ j=0 ∨ i=1 => p 0
    | i=0 => p j
    ]
  }
}

def trans/filler : {
  (A : univ) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → 𝕀 → 𝕀 → A
} = {
  λ A p q j i =>
  hcom A 0 j {∂ i} {λ j _ =>
    [ j=0 ∨ i=0 => p i
    | i=1 => q j
    ]
  }
}

def trans : {
  (A : univ) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) → path {λ _ => A} {p 0} {q 1}
} = {
  λ A p q => trans/filler A p q 1
}


def J : {
  (A : univ) (p : 𝕀 → A) (C : {(i : 𝕀) → sub A {i=0} {p 0}} → univ) →
  {C {λ _ => p 0}} → C p
} = {
  λ A p C d =>
  coe {λ i =>
    C {λ j =>
      hcom A 0 j {∂ i} {λ k _ => [k=0 ∨ i=0 => p 0 | i=1 => p k]}
    }
  } 0 1 d
}

/-
def trans-assoc : {
  (A : univ) (s : A) (t : A) (u : A) (v : A)
  (p : path {λ _ => A} s t) (q : path {λ _ => A} t u) (r : path {λ _ => A} u v) →
    path
      {λ _ => path {λ _ => A} s v}
      {trans A {trans A p q} r}
      {trans A p {trans A q r}}
} = {
  λ A s t u v p q r i j => hcom A 0 j {λ k _ => ?}
}
-/

-- def trans-left-unit : {
--   (A : univ) (x : A) (y : A) (p : Id A x y)
--   → Id {Id A x y} {trans A x x y refl p} p
-- } = {
--   λ A x y p => refl
-- }

-- def trans-right-unit : {
--   (A : univ) (x : A) (y : A) (p : Id A x y)
--   → Id {Id A x y} {trans A x y y p refl} p
-- } = {
--   λ A x y p =>
--   elim p @ {x y p => Id {Id A x y} {trans A x y y p refl} p} [
--   | refl => refl
--   ]
-- }

-- def trans-symm-refl : {
--   (A : univ) (x : A) (y : A) (p : Id A x y)
--   → Id {Id A x x} {trans A x y x p {symm A x y p}} refl
-- } = {
--   λ A x y p =>
--   elim p @ {x y p =>
--     Id {Id A x x} {trans A x y x p {symm A x y p}} refl
--   } [
--   | refl => refl
--   ]
-- }

-- def cong : {
--   (A : univ) (B : univ) (f : A → B)
--   (x : A) (y : A) (p : Id A x y)
--   → Id B {f x} {f y}
-- } = {
--   λ A B f x y p =>
--   elim p @ {u v _ => Id B {f u} {f v}} [
--   | refl => refl
--   ]
-- }

def + : nat → nat → nat = {
  λ elim [
  | zero => λ n => n
  | suc {_ => ih} => λ n => suc {ih n}
  ]
}

def +-right-unit : (x : nat) → path {λ _ => nat} {+ x 0} x = {
  λ elim [
  | zero =>
    λ _ => 0
  | suc {y => ih} =>
    λ i => suc {ih i}
  ]
}

def +-left-unit : (x : nat) → path {λ _ => nat} {+ 0 x} x = {
  λ x _ => x
}

def +-suc-r : (x : nat) (y : nat) → path {λ _ => nat} {+ x {suc y}} {suc {+ x y}} = {
  λ elim [
  | zero =>
    λ x i => {suc x}
  | suc {x => ih} =>
    λ y i => suc {ih y i}
  ]
}

def +-comm : (x : nat) (y : nat) → path {λ _ => nat} {+ y x} {+ x y} = {
  λ elim [
  | zero => +-right-unit
  | suc {y => ih} =>
    λ z =>
    trans nat {+-suc-r z y} {λ j => suc {ih z j}}
  ]
}

def +-assoc : {
  (x : nat) (y : nat) (z : nat) →
  path {λ _ => nat} {+ {+ x y} z} {+ x {+ y z}}
} = {
  λ elim [
  | zero => λ y z i => + y z
  | suc {x => ih} => λ y z i => suc {ih y z i}
  ]
}

def test : {
  (p : 𝕀 → nat) → (i : 𝕀) → nat
} = {
  λ p i =>
  elim {symm nat p i} @ {_ => nat} [
  | zero => zero
  | suc {x => ih} => zero
  ]
}
