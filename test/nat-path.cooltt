def symm : {
  (A : univ) (p : dim -> A) (i : dim) -> A
}= {
  \A p i =>
  hcom A 0 1 {{i==0} \/ {i==1}} {\j _ =>
    [ {j==0} \/ {i==1} => p 0
    | i==0 => p j
    ]
  }
}

def trans : {
  (A : univ) (p : dim -> A) (q : (i : dim) -> sub A {i==0} {p 1}) -> path {\_ => A} {p 0} {q 1}
} = {
  \A p q i =>
  hcom A 0 1 {{i==0} \/ {i==1}} {\j _ =>
    [ {j==0} \/ {i==0} => p i
    | i==1 => q j
    ]
  }
}

normalize trans
normalize symm

def + : nat -> nat -> nat = {
  \elim [
  | zero => \n => n
  | suc {_ => ih} => \n => suc {ih n}
  ]
}

def +-right-unit : (x : nat) -> path {\_ => nat} {+ x 0} x = {
  \elim [
  | zero =>
    \_ => 0
  | suc {y => ih} =>
    \i => suc {ih i}
  ]
}

def +-left-unit : (x : nat) -> path {\_ => nat} {+ 0 x} x = {
  \x _ => x
}

def +-suc-r : (x : nat) (y : nat) -> path {\_ => nat} {+ x {suc y}} {suc {+ x y}} = {
  \elim [
  | zero =>
    \x i => {suc x}
  | suc {x => ih} =>
    \y i => suc {ih y i}
  ]
}


def +-comm : (x : nat) (y : nat) -> path {\_ => nat} {+ y x} {+ x y} = {
  \elim [
  | zero => +-right-unit
  | suc {y => ih} =>
    \z =>
    trans nat {+-suc-r z y} {\j => suc {ih z j}}
  ]
}

def +-assoc : {
  (x : nat) (y : nat) (z : nat) ->
  path {\_ => nat} {+ {+ x y} z} {+ x {+ y z}}
} = {
  \elim [
  | zero => \y z i => {+ y z}
  | suc {x => ih} => \y z i => {suc {ih y z i}}
  ]
}

