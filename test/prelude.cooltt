-- Path Types, and some common operations
def path (A : type) (x y : A) : type :=
  ext i => A with [i=0 => x | i=1 => y]


def path-p (A : 𝕀 → type) (x : A 0) (y : A 1) : type :=
  ext i => A i with [i=0 => x | i=1 => y]

def refl (A : type) (x : A) : path A x x :=
  i => x

def symm/filler (A : type) (p : 𝕀 → A) (i : 𝕀) : 𝕀 → A :=
  hfill A 0 {∂ i} {j _ =>
    [ j=0 ∨ i=1 => p 0
    | i=0 => p j
    ]
  }

abstract
def symm (A : type) (p : 𝕀 → A) : path A {p 1} {p 0} :=
  i => symm/filler A p i 1

def trans/filler (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) (j : 𝕀) (i : 𝕀) : A :=
  hcom A 0 j {∂ i} {j _ =>
    [ j=0 ∨ i=0 => p i
    | i=1 => q j
    ]
  }

abstract
def trans (A : type) (p : 𝕀 → A) (q : (i : 𝕀) → sub A {i=0} {p 1}) : path A {p 0} {q 1} :=
  trans/filler A p q 1

def cong (A : type) (B : A → type) (f : (a : A) → B a) (x y : A) (p : path A x y) : path-p {i => B {p i}} {f x} {f y} :=
  i => f {p i}

def funext (A : type) (B : type) (f : (x : A) → B) (g : (x : A) → B) (h : (x : A) → path B {f x} {g x}) : path {(x : A) → B} f g :=
  i x => h x i

def unit : type := ext => nat with [⊤ => 0]

def ⋆ : unit := 0

def unit/eta (x : unit) : path unit ⋆ x :=
  _ => x


#print path

def foo : type := path nat 0 0

#print foo
