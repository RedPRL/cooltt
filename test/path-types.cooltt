-- See also pre-path-types.cooltt.

def formation : {
  (A : 𝕀 → type) (a : A 0) (b : A 1) → type
} = {
  A a b =>
  ext i => A i with [ i=0 => a | i=1 => b]
}

normalize formation

def myrefl : {
  (A : type) (a : A) → pathd {_ => A} a a
} = {
  A a i => a
}

normalize myrefl

def funext : {
  (A : type) (B : type) (f : (x : A) → B) (g : (x : A) → B)
  (h : (x : A) → pathd {_ => B} {f x} {g x})
  → pathd {_ => (x : A) → B} f g
} = {
  A B f g h i x =>
  h x i
}

normalize funext

def pairext : {
  (A : type) (B : type) (p : (x : A) × B) (q : (x : A) × B)
  (h : (x : pathd {_ => A} {fst p} {fst q}) × pathd {_ => B} {snd p} {snd q})
  → pathd {_ => (x : A) × B} p q
} = {
  A B p q h i =>
  [ {fst h} i
  , {snd h} i
  ]
}

normalize pairext
