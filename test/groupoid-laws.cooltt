-- J-like proofs without carrying around J-on-refl paths everywhere
-- (by carrying around cofibrations everywhere instead)
import prelude

-- pretend we have CCHM Id-types
def special-j (A : type) (x : A) (B : (œÜ : ùîΩ) ‚Üí {(i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} x} ‚Üí type)
  (d : B ‚ä§ {_ => x})
  (œÜ : ùîΩ) (p : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} x)
  : sub {B œÜ p} œÜ d
  :=
  let filler : ùïÄ ‚Üí ùïÄ ‚Üí A :=
    j i =>
    hcom A 0 i {‚àÇ j ‚à® œÜ} {i _ =>
      [ i=0 ‚à® j=0 ‚à® œÜ => p 0
      | j=1 => p i
      ]
    }
  in
  com {j => B {œÜ ‚à® j=0} {filler j}} 0 1 {œÜ} {j _ => d}

def trans (A : type) (p : (i : ùïÄ) ‚Üí A)
  : (œÜ : ùîΩ) (q : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} {p 1})
  ‚Üí sub {path A {p 0} {q 1}} œÜ p
  :=
  special-j A {p 1} {_ q => path A {p 0} {q 1}} p

def assoc (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (œÜ : ùîΩ) (q : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} {p 1})
  : (œà : ùîΩ) (r : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œà} {q 1})
  ‚Üí sub {path {path A {p 0} {r 1}} {trans A {trans A p œÜ q} œà r} {trans A p {œÜ ‚àß œà} {trans A q œà r}}}
    œà {_ => trans A p œÜ q}
  :=
  special-j A {q 1}
    {œà r => path {path A {p 0} {r 1}} {trans A {trans A p œÜ q} œà r} {trans A p {œÜ ‚àß œà} {trans A q œà r}}}
    {_ => trans A p œÜ q}

def pentagonType (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (œÜ : ùîΩ) (q : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} {p 1})
  (œà : ùîΩ) (r : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œà} {q 1})
  (œá : ùîΩ) (s : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œá} {r 1})
  : type
  :=
  path
    {path
      {path A {p 0} {s 1}}
        {trans A {trans A {trans A p œÜ q} œà r} œá s}
        {trans A p {œÜ ‚àß œà ‚àß œá} {trans A q {œà ‚àß œá} {trans A r œá s}}}}
    {trans {path A {p 0} {s 1}}
      {assoc A {trans A p œÜ q} œà r œá s}
      {œà ‚àß œá}
      {assoc A p œÜ q {œà ‚àß œá} {trans A r œá s}}}
    {trans {path A {p 0} {s 1}}
      {j => trans A {assoc A p œÜ q œà r j} œá s}
      {œÜ ‚àß œà ‚àß œá}
      {trans {path A {p 0} {s 1}}
        {assoc A p {œÜ ‚àß œà} {trans A q œà r} œá s}
        {œÜ ‚àß œà ‚àß œá}
        {j => trans A p {œÜ ‚àß œà ‚àß œá} {assoc A q œà r œá s j}}}}

def pentagon (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (œÜ : ùîΩ) (q : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œÜ} {p 1})
  (œà : ùîΩ) (r : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œà} {q 1})
  : (œá : ùîΩ) (s : (i : ùïÄ) ‚Üí sub A {i=0 ‚à® œá} {r 1})
  ‚Üí pentagonType A p œÜ q œà r œá s
  :=
  special-j A {r 1}
    {pentagonType A p œÜ q œà r}
    {special-j A {q 1}
      {œà r => pentagonType A p œÜ q œà r ‚ä§ {_ => r 1}}
      {special-j A {p 1}
        {œÜ q => pentagonType A p œÜ q ‚ä§ {_ => q 1} ‚ä§ {_ => q 1}}
        {_ _ => p}
        œÜ q}
      œà r}

-- get the standard functions by instantiating at ‚ä• everywhere

def trans' (A : type) (p : (i : ùïÄ) ‚Üí A) (q : (i : ùïÄ) ‚Üí sub A {i=0} {p 1})
  : path A {p 0} {q 1}
  :=
  trans A p ‚ä• q

def assoc' (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (q : (i : ùïÄ) ‚Üí sub A {i=0} {p 1})
  (r : (i : ùïÄ) ‚Üí sub A {i=0} {q 1})
  : path {path A {p 0} {r 1}} {trans' A {trans' A p q} r} {trans' A p {trans' A q r}}
  :=
  assoc A p ‚ä• q ‚ä• r

def pentagon' (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (q : (i : ùïÄ) ‚Üí sub A {i=0} {p 1})
  (r : (i : ùïÄ) ‚Üí sub A {i=0} {q 1})
  (s : (i : ùïÄ) ‚Üí sub A {i=0} {r 1})
  : path
    {path
      {path A {p 0} {s 1}}
        {trans' A {trans' A {trans' A p q} r} s}
        {trans' A p {trans' A q {trans' A r s}}}}
    {trans' {path A {p 0} {s 1}}
      {assoc' A {trans' A p q} r s}
      {assoc' A p q {trans' A r s}}}
    {trans' {path A {p 0} {s 1}}
      {j => trans' A {assoc' A p q r j} s}
      {trans' {path A {p 0} {s 1}}
        {assoc' A p {trans' A q r} s}
        {j => trans' A p {assoc' A q r s j}}}}
  :=
  pentagon A p ‚ä• q ‚ä• r ‚ä• s

def test (A : type)
  (p : (i : ùïÄ) ‚Üí A)
  (q : (i : ùïÄ) ‚Üí sub A {i=0} {p 1})
  (r : (i : ùïÄ) ‚Üí sub A {i=0} {q 1})
  (s : (i : ùïÄ) ‚Üí sub A {i=0} {r 1})
  : (j : ùïÄ) ‚Üí path A {p 0} {r 1}
  :=
  j => assoc A p ‚ä• q ‚ä• r j
