import prelude

def is-contr (C : type) : type :=
  (c : C) × {(c' : C) → path C c c'}

def is-prop (C : type) : type :=
  (c : C) (c' : C) → path C c c'

def has-hlevel : nat → type → type :=
  let aux : nat → type → type :=
    elim [
    | zero => is-prop
    | suc {l => ih} =>
      A => (a : A) (a' : A) → ih {path A a a'}
    ]
  in
  elim [
  | zero => is-contr
  | suc l => aux l
  ]

def is-set : type → type := has-hlevel 2
def is-groupoid : type → type := has-hlevel 3

def hLevel (n : nat) : type :=
  (A : type) × has-hlevel n A

def hProp : type := hLevel 1
def hSet : type := hLevel 2
def hGroupoid : type := hLevel 3

print hProp
normalize hProp

def contr-prop (A : type) (A/contr : is-contr A) : is-prop A :=
  a a' => trans A {symm A {{snd A/contr} a}} {{snd A/contr} a'}

def prop-set (A : type) (A/prop : is-prop A) : is-set A :=
  a b p q i j => hcom A 0 1 {∂ i ∨ ∂ j} {k _ =>
    [ k=0 ∨ ∂ j ∨ i=0 => A/prop a {p j} k
    | i=1 => A/prop a {q j} k
    ]
  }

def raise-hlevel : (l : nat) (A : type) → has-hlevel l A → has-hlevel {suc l} A :=
  let aux : (m : nat) → (B : type) → has-hlevel {suc m} B → has-hlevel {suc {suc m}} B :=
    elim [
    | zero => prop-set
    | suc {l => ih} => B B/lvl b b' => ih {path B b b'} {B/lvl b b'}
    ]
  in
  elim [
  | zero => contr-prop
  | suc l => aux l
  ]

def prop-hlevel : (l : nat) (A : type) → is-prop A → has-hlevel {suc l} A :=
  elim [
  | zero => _ A/prop => A/prop
  | suc {l => ih} => A A/prop => raise-hlevel {suc l} A {ih A A/prop}
  ]

def path-hlevel
  : (l : nat) (A : type) (A/level : has-hlevel {suc l} A) (a : A) (a' : A)
  → has-hlevel l {path A a a'}
  :=
  elim [
  | zero => A A/prop a a' => [A/prop a a', p => prop-set A A/prop a a' {A/prop a a'} p]
  | suc l => A A/lvl a a' => A/lvl a a'
  ]

def path-based-contr (A : type) (a : A) : is-contr {(x : A) × path A a x} :=
  [ [a, i => a]
  , x i =>
    let aux : 𝕀 → A := j =>
      hcom A 0 j {∂ i} {k _ =>
        [ k=0 ∨ i=0 => a
        | i=1 => {snd x} k
        ]
      }
    in
    [aux 1, aux]
  ]
