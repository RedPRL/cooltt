import prelude
import nat

def monoid : type :=
  sig
    def C : type
    def op : C → C → C
    def z : C
    def idL : (x : C) → path C {op z x} x
    def idR : (x : C) → path C {op x z} x
    def assoc : (a b c : C) → path C {op {op a b} c} {op a {op b c}}
  end

#print monoid

#quit
def monoid/nat : monoid # [C := nat] :=
  struct
    def op := +
    def z := 0
    def idL := +-left-unit
    def idR := +-right-unit
    def assoc := +-assoc
  end

#print monoid/nat

def monoid/nat/+ : monoid # [C := nat, op := +] :=
  struct
    def z := 0
    def idL := +-left-unit
    def idR := +-right-unit
    def assoc := +-assoc
  end


#print monoid/nat/+
