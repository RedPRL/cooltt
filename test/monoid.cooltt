import prelude
import nat

def monoid : type :=
  sig
    def t : type
    def op : t → t → t
    def emp : t
    def opL : (u : t) → path t {op emp u} u
    def opR : (u : t) → path t {op u emp} u
    def opA : (u v w : t) → path t {op {op u v} w} {op u {op v w}}
  end

#print monoid

def monoid/nat : monoid # [t := nat] :=
  struct
    def op := +
    def emp := 0
    def opL := +-left-unit
    def opR := +-right-unit
    def opA := +-assoc
  end

#print monoid/nat

def monoid/nat/+ : monoid # [t := nat, op := +] :=
  struct
    def emp := 0
    def opL := +-left-unit
    def opR := +-right-unit
    def opA := +-assoc
  end


#print monoid/nat/+

def commutative-monoid : type :=
  sig
    include monoid
    def opC : (u v : t) → path t {op u v} {op v u}
  end