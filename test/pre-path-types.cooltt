/-
  In this file, the tests for the path type are rewritten in terms of the
  primitives that the path-type decodes to: the dependent product over the
  interval, and the cubical subtypes.
-/

def myrefl : {
  (A : type) (a : A) → (i : 𝕀) → sub A {∂ i} [∂ i => a]
} = {
  \A a i => a
}


def funext : {
  (A : type) (B : type) (f : (x : A) → B) (g : (x : A) → B)
  (h : (x : A) (i : 𝕀) → sub B {∂ i} [i=0 => f x | i=1 => g x])
  → (i : 𝕀) → sub {(x : A) → B} {∂ i} [i=0 => f | i=1 => g]
} = {
  \A B f g h i x =>
  h x i
}

def pairext : {
  (A : type) (B : type) (p : (x : A) × B) (q : (x : A) × B)
  (h :
     (x : (i : 𝕀) → sub A {∂ i} [i=0 => fst p | i=1 => fst q]) ×
     (i : 𝕀) → sub B {∂ i} [i=0 => snd p | i=1 => snd q])
  → (i : 𝕀) → sub {(x : A) × B} {∂ i} [i=0 => p | i=1 => q]
} = {
  \A B p q h i =>
  [ {fst h} i
  , {snd h} i
  ]
}

